{"version":3,"sources":["author.png","tabs.js","video/vid-bg.mp4","App.js","index.js"],"names":["Portfolio","window","open","Tutorial","Author","className","src","AuthorImg","alt","href","target","onClick","App","autoPlay","muted","BgVideo","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAAe,G,KAAA,IAA0B,oC,OCKnCA,EAAY,WAChBC,OAAOC,KACK,wBAAyB,WAIhC,SAASC,IACd,OACE,gCACA,4CACA,2LAIA,yKAIQ,8BACJ,iMAUJ,8BACA,uBADA,uOAOJ,8BACA,iMAKQ,8BACA,uBADA,uFAKA,8BACA,4HAIA,8BACA,uBADA,+EAKA,8BACA,kNAeD,SAASC,IACd,OACE,sBAAKC,UAAU,mBAAf,UACE,gCACA,qBAAKC,IAAKC,EAAWC,IAAI,UACzB,kDACA,uBAAM,mBAAGC,KAAK,wBAAwBC,OAAO,SAAvC,iCAGN,wBAAQC,QAASX,EAAjB,0BCvFS,UAA0B,mCCkD1BY,MA5Cf,WAEE,OACA,qCACA,uBAAOC,UAAQ,EAACC,OAAK,EAACT,UAAU,SAAhC,SACA,wBAAQC,IAAKS,EAASC,KAAK,gBAEzB,sBAAKX,UAAU,YAAf,UACA,sBAAKA,UAAU,mBAAf,UACE,oDACA,oGACA,mBAAGA,UAAU,OAAb,6BAGF,sBAAKA,UAAU,sBAAf,UACA,oBAAIA,UAAU,YAAd,SAA0B,uKAC1B,wEAA0C,4BAAG,kDAA7C,QAA4E,4BAAG,wCAA/E,6EAEU,mBAAGI,KAAK,8FAA8FC,OAAO,SAA7G,kCAFV,iBAGQ,mBAAGD,KAAK,0DAA0DC,OAAO,SAAzE,2DAHR,gDAMA,qBAAKL,UAAU,WAAf,SACC,cAACF,EAAD,MAGD,qBAAKE,UAAU,cAAf,SACA,8BACI,8DACM,uBACF,4EACA,uBAJR,eAKU,mBAAGI,KAAK,6CAAR,wCAIR,qBAAKJ,UAAU,SAAf,SACC,cAACD,EAAD,aCvCPa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.fb4e40a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/author.f1dce96f.png\";","import React from 'react';\r\nimport AuthorImg  from './author.png';\r\n\r\n\r\n\r\nconst Portfolio = () => {\r\n  window.open(\r\n              \"https://nirit.website\", \"_blank\");\r\n}\r\n\r\n\r\nexport function Tutorial() {\r\n  return (\r\n    <div>\r\n    <h3>Add styles</h3>\r\n    <p>\r\n    We know that we can add inline styles directly or use variables but...what if we want to do both??\r\n    For that, our lovely Spread Syntax comes to the rescue!\r\n    </p>\r\n    <p>\r\n    In the example below, we are creating an object contain set of styles, this object is being assigned to a variable\r\n    called 'theJoyStyle'.\r\n    </p>\r\n            <pre>\r\n        <code>\r\n        {`const theJoyStyle = {\r\n            content: 'o( ❛ᴗ❛ )o',\r\n            color: pink,\r\n            textAlign: 'center'\r\n          }\r\n          `}\r\n          </code>\r\n        </pre>\r\n\r\n    <p>\r\n    <br />\r\n    We then assigned this variable to our first div, but wait, look what we are doing in the second div\r\n    - here we adding not only the set of styles attached to the variable, but also additional custom inline style (fontSize: 22).\r\n    </p>\r\n\r\n\r\n<pre>\r\n<code>\r\n{`<div style={ theJoyStyle }> I'm having all the styles from theJoyStyle! </div>\r\n  <div style={{ ...theJoyStyle, fontSize: 22 }}> Spread theJoyStyle! </div>`}\r\n          </code>\r\n          </pre>\r\n        <p>\r\n        <br />\r\n        Neat, ah? and what if we want to use multiple variables? no problem! here is how:\r\n        </p>\r\n\r\n        <pre>\r\n        <code>\r\n        {`<div style={ ...theJoyStyle1, ...theJoyStyle2 }>٩(◕‿◕)۶</div>`}\r\n        </code>\r\n        </pre>\r\n        <p>\r\n        <br />\r\n        Let's have one more fun.. this time with Nested Variable, check this out:\r\n        </p>\r\n\r\n        <pre>\r\n        <code>\r\n        {`const theJoyStyle = {\r\n          ...nestedVariable,\r\n        content: 'o( ❛ᴗ❛ )o',\r\n        color: pink,\r\n        textAlign: 'center'\r\n        }\r\n        `}\r\n        </code>\r\n        </pre>\r\n\r\n            </div>\r\n          )\r\n        }\r\n\r\nexport function Author() {\r\n  return (\r\n    <div className=\"author-container\">\r\n      <div>\r\n      <img src={AuthorImg} alt=\"Autor\" />\r\n      <p>Creative & Code:)\r\n      <br /><a href=\"https://nirit.website\" target=\"_blank\">nirit.website</a>\r\n      </p>\r\n      </div>\r\n      <button onClick={Portfolio}>Portfolio</button>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/vid-bg.0e1fa824.mp4\";","import './App.css';\nimport { Tutorial, Author } from './tabs';\nimport BgVideo from './video/vid-bg.mp4';\n\n\n\nfunction App() {\n\n  return (\n  <>\n  <video autoPlay muted className=\"bg-vid\">\n  <source src={BgVideo} type=\"video/mp4\" />\n  </video>\n    <div className=\"container\">\n    <div className=\"main-content-top\">\n      <h1>...Spread the JOY!</h1>\n      <h2>The Spread operator syntax and inline styles in React (ES6 - ES12)</h2>\n      <p className=\"date\">June 5, 2021</p>\n    </div>\n\n    <div className=\"main-content-bottom\">\n    <h3 className=\"p-content\"><strong>The Spread Syntax - '...' (Yep, 3 dots) comes very handy when it comes to customize our inline styles in React - let's see how:</strong></h3>\n    <p>You will need a basic knowledge of the <b><i>Spread Operator</i></b> and <b><i>React</i></b>.\n          not familiar with those topics? no problem! here is a cool article about\n              <a href=\"https://medium.com/coding-at-dawn/how-to-use-the-spread-operator-in-javascript-b9e4a8b06fab\" target=\"_blank\"> The Spread Operator</a> and here is a\n            <a href=\"https://www.taniarascia.com/getting-started-with-react/\" target=\"_blank\"> React Tutorial: An Overview and Walkthrough.</a>\n        Now that we all caught up, let's continue:\n    </p>\n    <div className=\"commands\">\n     <Tutorial />\n    </div>\n\n    <div className=\"author-note\">\n    <p>\n        <strong>...and that's it folks! </strong>\n              <br />\n            <strong>Keep on learning and spread the joy..!</strong>\n            <br />\n            ▪️<a href=\"https://github.com/Frnt-End/Spread-the-JOY\">  Back to the Repo</a>\n    </p>\n          </div>\n      </div>\n      <div className=\"author\">\n       <Author />\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}